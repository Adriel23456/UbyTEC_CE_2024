// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SQL_Server.Data;

#nullable disable

namespace SQL_Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241102001953_AddBusinessEntity")]
    partial class AddBusinessEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SQL_Server.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Canton")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("[Province] + ', ' + [Canton] + ', ' + [District]", true);

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("[Name] + ' ' + [FirstSurname] + ' ' + [SecondSurname]", true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("SQL_Server.Models.AdminPhone", b =>
                {
                    b.Property<int>("Admin_id")
                        .HasColumnType("int");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.HasKey("Admin_id", "Phone");

                    b.ToTable("AdminPhone");
                });

            modelBuilder.Entity("SQL_Server.Models.BusinessAssociate", b =>
                {
                    b.Property<int>("Legal_Id")
                        .HasColumnType("int");

                    b.Property<string>("BusinessManager_Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BusinessType_Identification")
                        .HasColumnType("int");

                    b.Property<string>("Canton")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direction")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("[Province] + ', ' + [Canton] + ', ' + [District]", true);

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SINPE")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Legal_Id");

                    b.HasIndex("BusinessManager_Email")
                        .IsUnique();

                    b.HasIndex("BusinessType_Identification");

                    b.ToTable("BusinessAssociate");
                });

            modelBuilder.Entity("SQL_Server.Models.BusinessAssociatePhone", b =>
                {
                    b.Property<int>("BusinessAssociate_Legal_Id")
                        .HasColumnType("int");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.HasKey("BusinessAssociate_Legal_Id", "Phone");

                    b.ToTable("BusinessAssociatePhone");
                });

            modelBuilder.Entity("SQL_Server.Models.BusinessManager", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Canton")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direction")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("[Province] + ', ' + [Canton] + ', ' + [District]", true);

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("[Name] + ' ' + [FirstSurname] + ' ' + [SecondSurname]", true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Email");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("BusinessManager");
                });

            modelBuilder.Entity("SQL_Server.Models.BusinessManagerPhone", b =>
                {
                    b.Property<string>("BusinessManager_Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.HasKey("BusinessManager_Email", "Phone");

                    b.ToTable("BusinessManagerPhone");
                });

            modelBuilder.Entity("SQL_Server.Models.BusinessType", b =>
                {
                    b.Property<int?>("Identification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Identification"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Identification");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("BusinessType");
                });

            modelBuilder.Entity("SQL_Server.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Canton")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direction")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("[Province] + ', ' + [Canton] + ', ' + [District]", true);

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("[Name] + ' ' + [FirstSurname] + ' ' + [SecondSurname]", true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Client");
                });

            modelBuilder.Entity("SQL_Server.Models.FoodDeliveryMan", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Canton")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direction")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("[Province] + ', ' + [Canton] + ', ' + [District]", true);

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("[Name] + ' ' + [FirstSurname] + ' ' + [SecondSurname]", true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("FoodDeliveryMan");
                });

            modelBuilder.Entity("SQL_Server.Models.FoodDeliveryManPhone", b =>
                {
                    b.Property<string>("FoodDeliveryMan_UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.HasKey("FoodDeliveryMan_UserId", "Phone");

                    b.ToTable("FoodDeliveryManPhone");
                });

            modelBuilder.Entity("SQL_Server.Models.AdminPhone", b =>
                {
                    b.HasOne("SQL_Server.Models.Admin", "Admin")
                        .WithMany("AdminPhones")
                        .HasForeignKey("Admin_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("SQL_Server.Models.BusinessAssociate", b =>
                {
                    b.HasOne("SQL_Server.Models.BusinessManager", "BusinessManager")
                        .WithOne("BusinessAssociate")
                        .HasForeignKey("SQL_Server.Models.BusinessAssociate", "BusinessManager_Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SQL_Server.Models.BusinessType", "BusinessType")
                        .WithMany("BusinessAssociates")
                        .HasForeignKey("BusinessType_Identification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessManager");

                    b.Navigation("BusinessType");
                });

            modelBuilder.Entity("SQL_Server.Models.BusinessAssociatePhone", b =>
                {
                    b.HasOne("SQL_Server.Models.BusinessAssociate", "BusinessAssociate")
                        .WithMany("BusinessAssociatePhones")
                        .HasForeignKey("BusinessAssociate_Legal_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessAssociate");
                });

            modelBuilder.Entity("SQL_Server.Models.BusinessManagerPhone", b =>
                {
                    b.HasOne("SQL_Server.Models.BusinessManager", "BusinessManager")
                        .WithMany("BusinessManagerPhones")
                        .HasForeignKey("BusinessManager_Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessManager");
                });

            modelBuilder.Entity("SQL_Server.Models.FoodDeliveryManPhone", b =>
                {
                    b.HasOne("SQL_Server.Models.FoodDeliveryMan", "FoodDeliveryMan")
                        .WithMany("FoodDeliveryManPhones")
                        .HasForeignKey("FoodDeliveryMan_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodDeliveryMan");
                });

            modelBuilder.Entity("SQL_Server.Models.Admin", b =>
                {
                    b.Navigation("AdminPhones");
                });

            modelBuilder.Entity("SQL_Server.Models.BusinessAssociate", b =>
                {
                    b.Navigation("BusinessAssociatePhones");
                });

            modelBuilder.Entity("SQL_Server.Models.BusinessManager", b =>
                {
                    b.Navigation("BusinessAssociate");

                    b.Navigation("BusinessManagerPhones");
                });

            modelBuilder.Entity("SQL_Server.Models.BusinessType", b =>
                {
                    b.Navigation("BusinessAssociates");
                });

            modelBuilder.Entity("SQL_Server.Models.FoodDeliveryMan", b =>
                {
                    b.Navigation("FoodDeliveryManPhones");
                });
#pragma warning restore 612, 618
        }
    }
}
