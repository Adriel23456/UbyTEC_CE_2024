using Microsoft.EntityFrameworkCore;
using SQL_Server.Models;

namespace SQL_Server.Data
{
    public class ApplicationDbContext : DbContext
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
            : base(options)
        {
        }

        // DbSet properties
        public DbSet<Admin> Admin { get; set; }
        public DbSet<AdminPhone> AdminPhone { get; set; }
        public DbSet<BusinessManager> BusinessManager { get; set; }
        public DbSet<BusinessManagerPhone> BusinessManagerPhone { get; set; }
        public DbSet<FoodDeliveryMan> FoodDeliveryMan { get; set; }
        public DbSet<FoodDeliveryManPhone> FoodDeliveryManPhone { get; set; }
        public DbSet<Client> Client { get; set; }
        public DbSet<BusinessType> BusinessType { get; set; }
        public DbSet<BusinessAssociate> BusinessAssociate { get; set; }
        public DbSet<BusinessAssociatePhone> BusinessAssociatePhone { get; set; }
        public DbSet<Product> Product { get; set; }
        public DbSet<ProductPhoto> ProductPhoto { get; set; }
        public DbSet<Cart> Cart { get; set; }
        public DbSet<Cart_Product> Cart_Product { get; set; }
        public DbSet<Order> Order { get; set; }
        public DbSet<Order_Product> Order_Product { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            // Admin configurations
            // Configure unique index for Admin.UserId
            modelBuilder.Entity<Admin>()
                .HasIndex(a => a.UserId)
                .IsUnique();

            // Configure composite primary key for AdminPhone
            modelBuilder.Entity<AdminPhone>()
                .HasKey(ap => new { ap.Admin_id, ap.Phone });

            // Configure one-to-many relationship between Admin and AdminPhone
            modelBuilder.Entity<AdminPhone>()
                .HasOne(ap => ap.Admin)
                .WithMany(a => a.AdminPhones)
                .HasForeignKey(ap => ap.Admin_id);

            // Configure Admin.Id as not generated by the database
            modelBuilder.Entity<Admin>()
                .Property(a => a.Id)
                .ValueGeneratedNever();

            // Configure computed columns for Admin
            modelBuilder.Entity<Admin>()
                .Property(a => a.FullName)
                .HasComputedColumnSql("[Name] + ' ' + [FirstSurname] + ' ' + [SecondSurname]", stored: true);

            modelBuilder.Entity<Admin>()
                .Property(a => a.Direction)
                .HasComputedColumnSql("[Province] + ', ' + [Canton] + ', ' + [District]", stored: true);

            // BusinessManager configurations
            // Configure unique index for BusinessManager.UserId
            modelBuilder.Entity<BusinessManager>()
                .HasIndex(bm => bm.UserId)
                .IsUnique();

            // Configure composite primary key for BusinessManagerPhone
            modelBuilder.Entity<BusinessManagerPhone>()
                .HasKey(bmp => new { bmp.BusinessManager_Email, bmp.Phone });

            // Configure one-to-many relationship between BusinessManager and BusinessManagerPhone
            modelBuilder.Entity<BusinessManagerPhone>()
                .HasOne(bmp => bmp.BusinessManager)
                .WithMany(bm => bm.BusinessManagerPhones)
                .HasForeignKey(bmp => bmp.BusinessManager_Email);

            // Configure BusinessManager.Email as not generated by the database
            modelBuilder.Entity<BusinessManager>()
                .Property(bm => bm.Email)
                .ValueGeneratedNever();

            // Configure computed columns for BusinessManager
            modelBuilder.Entity<BusinessManager>()
                .Property(bm => bm.FullName)
                .HasComputedColumnSql("[Name] + ' ' + [FirstSurname] + ' ' + [SecondSurname]", stored: true);

            modelBuilder.Entity<BusinessManager>()
                .Property(bm => bm.Direction)
                .HasComputedColumnSql("[Province] + ', ' + [Canton] + ', ' + [District]", stored: true);

            // Configure one-to-one relationship between BusinessManager and BusinessAssociate
            modelBuilder.Entity<BusinessManager>()
                .HasOne(bm => bm.BusinessAssociate)
                .WithOne(ba => ba.BusinessManager)
                .HasForeignKey<BusinessAssociate>(ba => ba.BusinessManager_Email);

            // BusinessType configurations
            // Configure unique index for BusinessType.Name
            modelBuilder.Entity<BusinessType>()
                .HasIndex(bt => bt.Name)
                .IsUnique();

            // Configure one-to-many relationship between BusinessType and BusinessAssociate
            modelBuilder.Entity<BusinessType>()
                .HasMany(bt => bt.BusinessAssociates)
                .WithOne(ba => ba.BusinessType)
                .HasForeignKey(ba => ba.BusinessType_Identification);

            // FoodDeliveryMan configurations
            // Configure FoodDeliveryMan.UserId as not generated by the database
            modelBuilder.Entity<FoodDeliveryMan>()
                .Property(fdm => fdm.UserId)
                .ValueGeneratedNever();

            // Configure composite primary key for FoodDeliveryManPhone
            modelBuilder.Entity<FoodDeliveryManPhone>()
                .HasKey(fdmp => new { fdmp.FoodDeliveryMan_UserId, fdmp.Phone });

            // Configure one-to-many relationship between FoodDeliveryMan and FoodDeliveryManPhone
            modelBuilder.Entity<FoodDeliveryManPhone>()
                .HasOne(fdmp => fdmp.FoodDeliveryMan)
                .WithMany(fdm => fdm.FoodDeliveryManPhones)
                .HasForeignKey(fdmp => fdmp.FoodDeliveryMan_UserId);

            // Configure computed columns for FoodDeliveryMan
            modelBuilder.Entity<FoodDeliveryMan>()
                .Property(fdm => fdm.FullName)
                .HasComputedColumnSql("[Name] + ' ' + [FirstSurname] + ' ' + [SecondSurname]", stored: true);

            modelBuilder.Entity<FoodDeliveryMan>()
                .Property(fdm => fdm.Direction)
                .HasComputedColumnSql("[Province] + ', ' + [Canton] + ', ' + [District]", stored: true);

            // Client configurations
            // Configure unique index for Client.UserId
            modelBuilder.Entity<Client>()
                .HasIndex(c => c.UserId)
                .IsUnique();

            // Configure Client.Id as not generated by the database
            modelBuilder.Entity<Client>()
                .Property(c => c.Id)
                .ValueGeneratedNever();

            // Configure computed columns for Client
            modelBuilder.Entity<Client>()
                .Property(c => c.FullName)
                .HasComputedColumnSql("[Name] + ' ' + [FirstSurname] + ' ' + [SecondSurname]", stored: true);

            modelBuilder.Entity<Client>()
                .Property(c => c.Direction)
                .HasComputedColumnSql("[Province] + ', ' + [Canton] + ', ' + [District]", stored: true);

            // BusinessAssociate configurations
            // Configure BusinessAssociate.Legal_Id as not generated by the database
            modelBuilder.Entity<BusinessAssociate>()
                .Property(ba => ba.Legal_Id)
                .ValueGeneratedNever();

            // Configure computed columns for BusinessAssociate
            modelBuilder.Entity<BusinessAssociate>()
                .Property(ba => ba.Direction)
                .HasComputedColumnSql("[Province] + ', ' + [Canton] + ', ' + [District]", stored: true);

            // Configure one-to-one relationship between BusinessManager and BusinessAssociate
            modelBuilder.Entity<BusinessAssociate>()
                .HasOne(ba => ba.BusinessManager)
                .WithOne(bm => bm.BusinessAssociate)
                .HasForeignKey<BusinessAssociate>(ba => ba.BusinessManager_Email);

            // Configure one-to-many relationship between BusinessType and BusinessAssociate
            modelBuilder.Entity<BusinessAssociate>()
                .HasOne(ba => ba.BusinessType)
                .WithMany(bt => bt.BusinessAssociates)
                .HasForeignKey(ba => ba.BusinessType_Identification);

            // BusinessAssociatePhone configurations
            // Configure composite primary key for BusinessAssociatePhone
            modelBuilder.Entity<BusinessAssociatePhone>()
                .HasKey(bap => new { bap.BusinessAssociate_Legal_Id, bap.Phone });

            // Configure one-to-many relationship between BusinessAssociate and BusinessAssociatePhone
            modelBuilder.Entity<BusinessAssociatePhone>()
                .HasOne(bap => bap.BusinessAssociate)
                .WithMany(ba => ba.BusinessAssociatePhones)
                .HasForeignKey(bap => bap.BusinessAssociate_Legal_Id);
            
            // Product configurations
            modelBuilder.Entity<Product>()
                .HasKey(p => p.Code);

            modelBuilder.Entity<Product>()
                .Property(p => p.Code)
                .ValueGeneratedOnAdd(); // Auto-generated

            // Configure one-to-many relationship between BusinessAssociate and Product
            modelBuilder.Entity<Product>()
                .HasOne(p => p.BusinessAssociate)
                .WithMany(ba => ba.Products)
                .HasForeignKey(p => p.BusinessAssociate_Legal_Id);

            // ProductPhoto configurations
            modelBuilder.Entity<ProductPhoto>()
                .HasKey(pp => new { pp.Product_Code, pp.PhotoURL });

            // Configure one-to-many relationship between Product and ProductPhoto
            modelBuilder.Entity<ProductPhoto>()
                .HasOne(pp => pp.Product)
                .WithMany(p => p.ProductPhotos)
                .HasForeignKey(pp => pp.Product_Code);
            
            // Cart configurations
            modelBuilder.Entity<Cart>()
                .HasKey(c => c.Code);

            modelBuilder.Entity<Cart>()
                .Property(c => c.Code)
                .ValueGeneratedOnAdd(); // Auto-generated

            // Configure one-to-many relationship between Client and Cart
            modelBuilder.Entity<Cart>()
                .HasOne(c => c.Client)
                .WithMany(cl => cl.Carts)
                .HasForeignKey(c => c.Client_Id);

            // Cart_Product configurations
            // Configure composite primary key for Cart_Product
            modelBuilder.Entity<Cart_Product>()
                .HasKey(cp => new { cp.Cart_Code, cp.Product_Code });

            // Configure many-to-one relationship between Cart_Product and Cart
            modelBuilder.Entity<Cart_Product>()
                .HasOne(cp => cp.Cart)
                .WithMany(c => c.Cart_Products)
                .HasForeignKey(cp => cp.Cart_Code);

            // Configure many-to-one relationship between Cart_Product and Product
            modelBuilder.Entity<Cart_Product>()
                .HasOne(cp => cp.Product)
                .WithMany(p => p.Cart_Products)
                .HasForeignKey(cp => cp.Product_Code);
            
            // Order configurations
            modelBuilder.Entity<Order>()
                .HasKey(o => o.Code);
                
            modelBuilder.Entity<Order>()
                .Property(o => o.Code)
                .ValueGeneratedOnAdd(); // Auto-generated

            // Configure one-to-many relationship between Client and Order
            modelBuilder.Entity<Order>()
                .HasOne(o => o.Client)
                .WithMany(c => c.Orders)
                .HasForeignKey(o => o.Client_Id);

            // Configure one-to-many relationship between FoodDeliveryMan and Order
            modelBuilder.Entity<Order>()
                .HasOne(o => o.FoodDeliveryMan)
                .WithMany(fdm => fdm.Orders)
                .HasForeignKey(o => o.FoodDeliveryMan_UserId);

            // Order_Product configurations
            // Configure composite primary key for Order_Product
            modelBuilder.Entity<Order_Product>()
                .HasKey(op => new { op.Order_Code, op.Product_Code });

            // Configure many-to-one relationship between Order_Product and Order
            modelBuilder.Entity<Order_Product>()
                .HasOne(op => op.Order)
                .WithMany(o => o.Order_Products)
                .HasForeignKey(op => op.Order_Code);

            // Configure many-to-one relationship between Order_Product and Product
            modelBuilder.Entity<Order_Product>()
                .HasOne(op => op.Product)
                .WithMany(p => p.Order_Products)
                .HasForeignKey(op => op.Product_Code);
        }
    }
}